\begin{Verbatim}[commandchars=\\\{\}]
\PYGdefault{k+kn}{package} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.form}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.lang.reflect.Method}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.ArrayList}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Collections}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Comparator}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.HashMap}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.List}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Map}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Objects}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.collections.ObservableList}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.scene.Node}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.scene.control.ChoiceBox}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.scene.layout.ColumnConstraints}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.scene.layout.GridPane}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.scene.text.Text}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{javafx.util.StringConverter}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.annotation.FormField}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.annotation.SelectFormField}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.api.AbstractViewModel}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.api.FormContext}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.form.FormUtils.FormFieldType}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.form.FormUtils.FormFieldValidator}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.fx.campina.view.form.FormUtils.RequiredFormFieldValidator}\PYGdefault{o}{;}

\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{ * This class is a for field handler which handles the form fields related to}
\PYGdefault{c+cm}{ * the model class the handler is for. \PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ * This implementation uses fluent api.}
\PYGdefault{c+cm}{ * }
\PYGdefault{c+cm}{ * @author Thomas Herzog \PYGdefaultZlt{}thomas.herzog@students.fh\PYGdefaultZhy{}hagenberg.at\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ * @date May 31, 2015}
\PYGdefault{c+cm}{ * @param \PYGdefaultZlt{}T\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ */}
\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{class} \PYGdefault{n+nc}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T} \PYGdefault{k+kd}{extends} \PYGdefault{n}{AbstractViewModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{o}{\PYGdefaultZob{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Model which holds the resolved form field information.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @author Thomas Herzog \PYGdefaultZlt{}thomas.herzog@students.fh\PYGdefaultZhy{}hagenberg.at\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * @date May 31, 2015}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{private} \PYGdefault{k+kd}{static} \PYGdefault{k+kd}{class} \PYGdefault{n+nc}{FormFieldResolvedModel} \PYGdefault{o}{\PYGdefaultZob{}}

		\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{final} \PYGdefault{n}{String}					\PYGdefault{n}{id}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{final} \PYGdefault{n}{String}					\PYGdefault{n}{globalPrefix}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{final} \PYGdefault{n}{String}					\PYGdefault{n}{methodGetterName}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{final} \PYGdefault{n}{String}					\PYGdefault{n}{methodSetterName}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{final} \PYGdefault{n}{FormField}				\PYGdefault{n}{field}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{private} \PYGdefault{k+kd}{final} \PYGdefault{n}{Map}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{,} \PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{}}	\PYGdefault{n}{additionalData}	\PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{HashMap}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}();}

		\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{		 * Used for lightweight instance for searching in set}
\PYGdefault{c+cm}{		 * }
\PYGdefault{c+cm}{		 * @param globalPrefix}
\PYGdefault{c+cm}{		 * @param methodName}
\PYGdefault{c+cm}{		 */}
		\PYGdefault{k+kd}{public} \PYGdefault{n+nf}{FormFieldResolvedModel}\PYGdefault{o}{(}\PYGdefault{n}{String} \PYGdefault{n}{globalPrefix}\PYGdefault{o}{,} \PYGdefault{n}{String} \PYGdefault{n}{methodName}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{super}\PYGdefault{o}{();}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{globalPrefix} \PYGdefault{o}{=} \PYGdefault{n}{globalPrefix}\PYGdefault{o}{;}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{methodGetterName} \PYGdefault{o}{=} \PYGdefault{n}{methodName}\PYGdefault{o}{;}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{methodSetterName} \PYGdefault{o}{=} \PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{replace}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}get\PYGdefaultZdq{}}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}set\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{id} \PYGdefault{o}{=} \PYGdefault{l+s}{\PYGdefaultZdq{}field\PYGdefaultZhy{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{substring}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{3}\PYGdefault{o}{,} \PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{length}\PYGdefault{o}{())}
											\PYGdefault{o}{.}\PYGdefault{n+na}{toLowerCase}\PYGdefault{o}{();}

			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{field} \PYGdefault{o}{=} \PYGdefault{k+kc}{null}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{		 * @param globalPrefix}
\PYGdefault{c+cm}{		 * @param methodName}
\PYGdefault{c+cm}{		 * @param field}
\PYGdefault{c+cm}{		 */}
		\PYGdefault{k+kd}{public} \PYGdefault{n+nf}{FormFieldResolvedModel}\PYGdefault{o}{(}\PYGdefault{n}{String} \PYGdefault{n}{globalPrefix}\PYGdefault{o}{,} \PYGdefault{n}{String} \PYGdefault{n}{methodName}\PYGdefault{o}{,} \PYGdefault{n}{FormField} \PYGdefault{n}{field}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{super}\PYGdefault{o}{();}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{globalPrefix}\PYGdefault{o}{);}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{methodName}\PYGdefault{o}{);}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{field}\PYGdefault{o}{);}

			\PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{startsWith}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}get\PYGdefaultZdq{}}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalArgumentException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Method must be a valid java bean getter\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{globalPrefix} \PYGdefault{o}{=} \PYGdefault{n}{globalPrefix}\PYGdefault{o}{;}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{methodGetterName} \PYGdefault{o}{=} \PYGdefault{n}{methodName}\PYGdefault{o}{;}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{methodSetterName} \PYGdefault{o}{=} \PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{replace}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}get\PYGdefaultZdq{}}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}set\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{id} \PYGdefault{o}{=} \PYGdefault{l+s}{\PYGdefaultZdq{}field\PYGdefaultZhy{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{substring}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{3}\PYGdefault{o}{,} \PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{length}\PYGdefault{o}{())}
											\PYGdefault{o}{.}\PYGdefault{n+na}{toLowerCase}\PYGdefault{o}{();}
			\PYGdefault{o}{;}
			\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{field} \PYGdefault{o}{=} \PYGdefault{n}{field}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k+kd}{public} \PYGdefault{n}{String} \PYGdefault{n+nf}{toMessageId}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{id}\PYGdefault{o}{);}

			\PYGdefault{k}{return} \PYGdefault{n}{globalPrefix} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZhy{}message\PYGdefaultZhy{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{id}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k+kd}{public} \PYGdefault{n}{String} \PYGdefault{n+nf}{toLabelId}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{return} \PYGdefault{n}{globalPrefix} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZhy{}label\PYGdefaultZhy{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{id}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k+kd}{public} \PYGdefault{n}{String} \PYGdefault{n+nf}{toNodeId}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{return} \PYGdefault{n}{globalPrefix} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZhy{}node\PYGdefaultZhy{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{id}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k+kd}{public} \PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{putData}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{n}{Object}
				\PYGdefault{n}{key}\PYGdefault{o}{,} \PYGdefault{n}{T} \PYGdefault{n}{instance}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{key}\PYGdefault{o}{);}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{instance}\PYGdefault{o}{);}

			\PYGdefault{n}{additionalData}\PYGdefault{o}{.}\PYGdefault{n+na}{put}\PYGdefault{o}{(}\PYGdefault{n}{key}\PYGdefault{o}{,} \PYGdefault{n}{instance}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k+kd}{public} \PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{T} \PYGdefault{n+nf}{getData}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{n}{Object} \PYGdefault{n}{key}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{key}\PYGdefault{o}{);}

			\PYGdefault{k}{return} \PYGdefault{o}{(}\PYGdefault{n}{T}\PYGdefault{o}{)} \PYGdefault{n}{additionalData}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{key}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{n+nd}{@Override}
		\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{hashCode}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{prime} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{31}\PYGdefault{o}{;}
			\PYGdefault{k+kt}{int} \PYGdefault{n}{result} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
			\PYGdefault{n}{result} \PYGdefault{o}{=} \PYGdefault{n}{prime} \PYGdefault{o}{*} \PYGdefault{n}{result} \PYGdefault{o}{+} \PYGdefault{o}{((}\PYGdefault{n}{id} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{?} \PYGdefault{l+m+mi}{0} \PYGdefault{o}{:} \PYGdefault{n}{id}\PYGdefault{o}{.}\PYGdefault{n+na}{hashCode}\PYGdefault{o}{());}
			\PYGdefault{k}{return} \PYGdefault{n}{result}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{n+nd}{@Override}
		\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{boolean} \PYGdefault{n+nf}{equals}\PYGdefault{o}{(}\PYGdefault{n}{Object} \PYGdefault{n}{obj}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{k}{this} \PYGdefault{o}{==} \PYGdefault{n}{obj}\PYGdefault{o}{)}
				\PYGdefault{k}{return} \PYGdefault{k+kc}{true}\PYGdefault{o}{;}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{obj} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)}
				\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{getClass}\PYGdefault{o}{()} \PYGdefault{o}{!=} \PYGdefault{n}{obj}\PYGdefault{o}{.}\PYGdefault{n+na}{getClass}\PYGdefault{o}{())}
				\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
			\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{other} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{)} \PYGdefault{n}{obj}\PYGdefault{o}{;}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{id} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{other}\PYGdefault{o}{.}\PYGdefault{n+na}{id} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)}
					\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
			\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{else} \PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{id}\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{other}\PYGdefault{o}{.}\PYGdefault{n+na}{id}\PYGdefault{o}{))}
				\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
			\PYGdefault{k}{return} \PYGdefault{k+kc}{true}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{k+kd}{private} \PYGdefault{k+kt}{boolean}	\PYGdefault{n}{started}	\PYGdefault{o}{=} \PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{;}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Empty default constructor}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n+nf}{FormHandler}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{super}\PYGdefault{o}{();}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Initializes this builder.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @return the current instance}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if the given model class is null}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the builder is already started}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{init}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{started}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Handler needs to be end before restarted\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{n}{started} \PYGdefault{o}{=} \PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{TRUE}\PYGdefault{o}{;}

		\PYGdefault{k}{return} \PYGdefault{k}{this}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Ands this builder.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @return the current instance}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the builder hasn\PYGdefaultZsq{}t been started before}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{end}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkIfStarted}\PYGdefault{o}{();}

		\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{started} \PYGdefault{o}{=} \PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{;}
		\PYGdefault{k}{return} \PYGdefault{k}{this}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Generates the grid which holds the form and its fields.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param ctx}
\PYGdefault{c+cm}{	 *            the backing form context which gets set on each form field}
\PYGdefault{c+cm}{	 *            node (label, field, message)}
\PYGdefault{c+cm}{	 * @return the generated grid}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if the given id is null}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the builder hasn\PYGdefaultZsq{}t been started before}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{GridPane} \PYGdefault{n+nf}{generateFormGrid}\PYGdefault{o}{(}\PYGdefault{n}{FormContext}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{ctx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkIfStarted}\PYGdefault{o}{();}
		\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}Form Context must be given\PYGdefaultZdq{}}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// column constrains, should be replaced by css}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{ColumnConstraints} \PYGdefault{n}{labelColConst} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ColumnConstraints}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{2}\PYGdefault{o}{);}
		\PYGdefault{n}{labelColConst}\PYGdefault{o}{.}\PYGdefault{n+na}{setPrefWidth}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{150}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{ColumnConstraints} \PYGdefault{n}{valueColConst} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ColumnConstraints}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{2}\PYGdefault{o}{);}
		\PYGdefault{n}{valueColConst}\PYGdefault{o}{.}\PYGdefault{n+na}{setPrefWidth}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{250}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{ColumnConstraints} \PYGdefault{n}{messageColConst} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ColumnConstraints}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{2}\PYGdefault{o}{);}
		\PYGdefault{n}{valueColConst}\PYGdefault{o}{.}\PYGdefault{n+na}{setPrefWidth}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{250}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// the grid which holds the form}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{GridPane} \PYGdefault{n}{gridPane} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{GridPane}\PYGdefault{o}{();}
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{setId}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{id} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZhy{}form\PYGdefaultZdq{}}\PYGdefault{o}{);}
		
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{setHgap}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{10}\PYGdefault{o}{);}
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{setVgap}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{10}\PYGdefault{o}{);}
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{setUserData}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{getColumnConstraints}\PYGdefault{o}{()}
				\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{labelColConst}\PYGdefault{o}{);}
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{getColumnConstraints}\PYGdefault{o}{()}
				\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{valueColConst}\PYGdefault{o}{);}
		\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{getColumnConstraints}\PYGdefault{o}{()}
				\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{messageColConst}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// the form fields defined in the model}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{models} \PYGdefault{o}{=} \PYGdefault{n}{createResolvedModels}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// generate form fields}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{i} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;} \PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZlt{}} \PYGdefault{n}{models}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{();} \PYGdefault{n}{i}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{model} \PYGdefault{o}{=} \PYGdefault{n}{models}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{i}\PYGdefault{o}{);}

			\PYGdefault{c+c1}{// form field label}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Text} \PYGdefault{n}{labelText} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{Text}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{label}\PYGdefault{o}{());}
			\PYGdefault{n}{labelText}\PYGdefault{o}{.}\PYGdefault{n+na}{setId}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{toLabelId}\PYGdefault{o}{());}
			\PYGdefault{n}{labelText}\PYGdefault{o}{.}\PYGdefault{n+na}{setUserData}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}

			\PYGdefault{c+c1}{// form field message}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Text} \PYGdefault{n}{messageText} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{Text}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{n}{messageText}\PYGdefault{o}{.}\PYGdefault{n+na}{setId}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{toMessageId}\PYGdefault{o}{());}
			\PYGdefault{n}{messageText}\PYGdefault{o}{.}\PYGdefault{n+na}{setVisible}\PYGdefault{o}{(}\PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{);}
			\PYGdefault{n}{messageText}\PYGdefault{o}{.}\PYGdefault{n+na}{setUserData}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}

			\PYGdefault{c+c1}{// form field}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Node} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{n}{FormUtils}\PYGdefault{o}{.}\PYGdefault{n+na}{create}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{());}
			\PYGdefault{n}{node}\PYGdefault{o}{.}\PYGdefault{n+na}{setId}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{toNodeId}\PYGdefault{o}{());}
			\PYGdefault{n}{node}\PYGdefault{o}{.}\PYGdefault{n+na}{setUserData}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}
			\PYGdefault{c+c1}{// Handing for select type}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{()}
							\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{FormFieldType}\PYGdefault{o}{.}\PYGdefault{n+na}{SELECT}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{ObservableList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{list} \PYGdefault{o}{=} \PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{getData}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{id}\PYGdefault{o}{);}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{SelectFormField} \PYGdefault{n}{select} \PYGdefault{o}{=} \PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{getData}\PYGdefault{o}{(}\PYGdefault{n}{SelectFormField}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{);}
				\PYGdefault{n}{StringConverter}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{converter} \PYGdefault{o}{=} \PYGdefault{k+kc}{null}\PYGdefault{o}{;}
				\PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{select}\PYGdefault{o}{.}\PYGdefault{n+na}{converter}\PYGdefault{o}{()}
							\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{StringConverter}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
						\PYGdefault{n}{converter} \PYGdefault{o}{=} \PYGdefault{n}{select}\PYGdefault{o}{.}\PYGdefault{n+na}{converter}\PYGdefault{o}{()}
											\PYGdefault{o}{.}\PYGdefault{n+na}{newInstance}\PYGdefault{o}{();}
					\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{Throwable} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
						\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Could not isntantiate select string converter \PYGdefaultZsq{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{select}\PYGdefault{o}{.}\PYGdefault{n+na}{converter}\PYGdefault{o}{()}
																													\PYGdefault{o}{.}\PYGdefault{n+na}{getName}\PYGdefault{o}{()} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsq{}\PYGdefaultZdq{}}\PYGdefault{o}{,} \PYGdefault{n}{e}\PYGdefault{o}{);}
					\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{ChoiceBox}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{box} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{ChoiceBox}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{})} \PYGdefault{n}{node}\PYGdefault{o}{;}
				\PYGdefault{n}{box}\PYGdefault{o}{.}\PYGdefault{n+na}{setItems}\PYGdefault{o}{(}\PYGdefault{n}{list}\PYGdefault{o}{);}
				\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{converter} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n}{box}\PYGdefault{o}{.}\PYGdefault{n+na}{setConverter}\PYGdefault{o}{(}\PYGdefault{n}{converter}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{}}

			\PYGdefault{c+c1}{// TODO: register form field events}

			\PYGdefault{c+c1}{// set form fields on grid}
			\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{labelText}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{n}{i}\PYGdefault{o}{);}
			\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{node}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{,} \PYGdefault{n}{i}\PYGdefault{o}{);}
			\PYGdefault{n}{gridPane}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{messageText}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{,} \PYGdefault{n}{i}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k}{return} \PYGdefault{n}{gridPane}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Fills the model with the form field set values.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param ctx}
\PYGdefault{c+cm}{	 *            the form context}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @return the current instance}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if either the scene or model is null}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the model defines form fields which could not be found on}
\PYGdefault{c+cm}{	 *             the given scene.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             If the reflective invocation of the models setter fails\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             If the builder hasn\PYGdefaultZsq{}t been started yet}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{fillModel}\PYGdefault{o}{(}\PYGdefault{n}{FormContext}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{ctx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkIfStarted}\PYGdefault{o}{();}
		\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}Need form context to search for form fields\PYGdefaultZdq{}}\PYGdefault{o}{);}

		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{models} \PYGdefault{o}{=} \PYGdefault{n}{createResolvedModels}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{fieldModel} \PYGdefault{o}{:} \PYGdefault{n}{models}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Node} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{.}\PYGdefault{n+na}{lookup}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsh{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{toNodeId}\PYGdefault{o}{());}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{node} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Scene does not contain form field with id\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{Method} \PYGdefault{n}{method}\PYGdefault{o}{;}
				\PYGdefault{n}{Class}\PYGdefault{o}{\PYGdefaultZlt{}?\PYGdefaultZgt{}} \PYGdefault{n}{valueClass} \PYGdefault{o}{=} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{valueClass}\PYGdefault{o}{();}
				\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{valueClass}\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{Object}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n}{valueClass} \PYGdefault{o}{=} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{().}\PYGdefault{n+na}{valueClass}\PYGdefault{o}{;}
				\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{n}{method} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{getClass}\PYGdefault{o}{()}
									\PYGdefault{o}{.}\PYGdefault{n+na}{getMethod}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{methodSetterName}\PYGdefault{o}{,} \PYGdefault{n}{valueClass}\PYGdefault{o}{);}
				\PYGdefault{n}{method}\PYGdefault{o}{.}\PYGdefault{n+na}{invoke}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{model}\PYGdefault{o}{,} \PYGdefault{n}{FormUtils}\PYGdefault{o}{.}\PYGdefault{n+na}{getFormFieldValue}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{(),} \PYGdefault{n}{node}\PYGdefault{o}{));}
			\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{Throwable} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Could not set model value\PYGdefaultZdq{}}\PYGdefault{o}{,} \PYGdefault{n}{e}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{k}{this}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Fills the form with the model provided set values.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param ctx}
\PYGdefault{c+cm}{	 *            the form context}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @return the current instance}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if either the scene or model is null}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the model defines form fields which could not be found on}
\PYGdefault{c+cm}{	 *             the given scene.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             If the reflective invocation of the models getter fails\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             If the builder hasn\PYGdefaultZsq{}t been started yet}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{fillForm}\PYGdefault{o}{(}\PYGdefault{n}{FormContext}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{ctx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkIfStarted}\PYGdefault{o}{();}
		\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}Need context to search for form fields\PYGdefaultZdq{}}\PYGdefault{o}{);}

		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{models} \PYGdefault{o}{=} \PYGdefault{n}{createResolvedModels}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{fieldModel} \PYGdefault{o}{:} \PYGdefault{n}{models}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Node} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{.}\PYGdefault{n+na}{lookup}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsh{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{toNodeId}\PYGdefault{o}{());}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{node} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Scene does not contain form field with id\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldType}\PYGdefault{o}{.}\PYGdefault{n+na}{SELECT}\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{()))} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k+kd}{final} \PYGdefault{n}{ChoiceBox}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{box} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{ChoiceBox}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{})} \PYGdefault{n}{node}\PYGdefault{o}{;}
					\PYGdefault{n}{box}\PYGdefault{o}{.}\PYGdefault{n+na}{setItems}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{getData}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{id}\PYGdefault{o}{));}
				\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{Object} \PYGdefault{n}{value} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{getClass}\PYGdefault{o}{()}
												\PYGdefault{o}{.}\PYGdefault{n+na}{getMethod}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{methodGetterName}\PYGdefault{o}{)}
												\PYGdefault{o}{.}\PYGdefault{n+na}{invoke}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{model}\PYGdefault{o}{);}
				\PYGdefault{n}{FormUtils}\PYGdefault{o}{.}\PYGdefault{n+na}{setFormValue}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{(),} \PYGdefault{n}{node}\PYGdefault{o}{,} \PYGdefault{n}{value}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{Throwable} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Could not set model value\PYGdefaultZdq{}}\PYGdefault{o}{,} \PYGdefault{n}{e}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{k}{this}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Resets the form by searching all form elements in the given scene. It}
\PYGdefault{c+cm}{	 * sets all values to null.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param ctx}
\PYGdefault{c+cm}{	 *            the form context}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @return the current instance}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if the context is null}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if a model has a for field defined but it could not be found}
\PYGdefault{c+cm}{	 *             on the scene}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{resetForm}\PYGdefault{o}{(}\PYGdefault{n}{FormContext}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{ctx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkIfStarted}\PYGdefault{o}{();}
		\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}Need to scene to search for form fields\PYGdefaultZdq{}}\PYGdefault{o}{);}

		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{models} \PYGdefault{o}{=} \PYGdefault{n}{createResolvedModels}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{fieldModel} \PYGdefault{o}{:} \PYGdefault{n}{models}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Node} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{.}\PYGdefault{n+na}{lookup}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsh{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{toNodeId}\PYGdefault{o}{());}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{node} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Scene does not contain form field with id\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{n}{FormUtils}\PYGdefault{o}{.}\PYGdefault{n+na}{resetFormValue}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{(),} \PYGdefault{n}{node}\PYGdefault{o}{);}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Text} \PYGdefault{n}{messageNode} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{Text}\PYGdefault{o}{)} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{.}\PYGdefault{n+na}{lookup}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsh{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{toMessageId}\PYGdefault{o}{());}
			\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setVisible}\PYGdefault{o}{(}\PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{k}{this}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Validates the form backed by the given \PYGdefaultZob{}@link FormContext\PYGdefaultZcb{}. \PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * Manipulates the context valid falg during the validation}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param ctx}
\PYGdefault{c+cm}{	 *            the form context}
\PYGdefault{c+cm}{	 * @return the current instance}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if the context is null}
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the builder hasn\PYGdefaultZsq{}t been start yet}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{FormHandler}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{validateForm}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{n}{FormContext}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{ctx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkIfStarted}\PYGdefault{o}{();}
		\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}Need form context to validate form\PYGdefaultZdq{}}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// expected valid}
		\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{valid} \PYGdefault{o}{=} \PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{TRUE}\PYGdefault{o}{;}
		\PYGdefault{c+c1}{// required validator}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{FormFieldValidator}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Node}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{requiredValidator} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{RequiredFormFieldValidator}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Node}\PYGdefault{o}{\PYGdefaultZgt{}();}
		\PYGdefault{c+c1}{// the form field models}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{models} \PYGdefault{o}{=} \PYGdefault{n}{createResolvedModels}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{);}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{fieldModel} \PYGdefault{o}{:} \PYGdefault{n}{models}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Node} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{.}\PYGdefault{n+na}{lookup}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsh{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{toNodeId}\PYGdefault{o}{());}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{node} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Scene does not contain form field with id\PYGdefaultZdq{}}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Text} \PYGdefault{n}{messageNode} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{Text}\PYGdefault{o}{)} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{scene}\PYGdefault{o}{.}\PYGdefault{n+na}{lookup}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsh{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{toMessageId}\PYGdefault{o}{());}
			\PYGdefault{c+c1}{// need type validation}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{FormFieldType}\PYGdefault{o}{.}\PYGdefault{n+na}{DECIMAL}\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{()))} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n}{FormUtils}\PYGdefault{o}{.}\PYGdefault{n+na}{getFormFieldValue}\PYGdefault{o}{(}\PYGdefault{n}{FormFieldType}\PYGdefault{o}{.}\PYGdefault{n+na}{DECIMAL}\PYGdefault{o}{,} \PYGdefault{n}{node}\PYGdefault{o}{);}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setVisible}\PYGdefault{o}{(}\PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{);}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setText}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZdq{}}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{NumberFormatException} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{valid} \PYGdefault{o}{=} \PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{;}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setVisible}\PYGdefault{o}{(}\PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{TRUE}\PYGdefault{o}{);}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setText}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Keine gültige Nummer\PYGdefaultZdq{}}\PYGdefault{o}{);}
					\PYGdefault{k}{continue}\PYGdefault{o}{;}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{c+c1}{// need required validation}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{required}\PYGdefault{o}{())} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{c+c1}{// is invalid}
				\PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{requiredValidator}\PYGdefault{o}{.}\PYGdefault{n+na}{valid}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{type}\PYGdefault{o}{(),} \PYGdefault{n}{node}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{valid} \PYGdefault{o}{=} \PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{FALSE}\PYGdefault{o}{;}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setVisible}\PYGdefault{o}{(}\PYGdefault{n}{Boolean}\PYGdefault{o}{.}\PYGdefault{n+na}{TRUE}\PYGdefault{o}{);}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setText}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{requiredMessage}\PYGdefault{o}{());}
				\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{c+c1}{// reset if valid}
				\PYGdefault{k}{else} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n}{messageNode}\PYGdefault{o}{.}\PYGdefault{n+na}{setText}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZdq{}}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{k}{this}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Throws exception if builder is not started when this method gets called.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @throws IllegalStateException}
\PYGdefault{c+cm}{	 *             if the builder hasn\PYGdefaultZsq{}t been started yet}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{private} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{checkIfStarted}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{started}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Builder not started\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Creates a list of resolved field models for the given model class.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param ctx}
\PYGdefault{c+cm}{	 *            The context which holds a model to generate the field models}
\PYGdefault{c+cm}{	 *            from}
\PYGdefault{c+cm}{	 * @return the resolved form fields represented by the created model}
\PYGdefault{c+cm}{	 * @throws NullPointerException}
\PYGdefault{c+cm}{	 *             if the context is null}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{private} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{createResolvedModels}\PYGdefault{o}{(}\PYGdefault{n}{FormContext}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{ctx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{Objects}\PYGdefault{o}{.}\PYGdefault{n+na}{requireNonNull}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{,} \PYGdefault{l+s}{\PYGdefaultZdq{}Contextmust not be null\PYGdefaultZdq{}}\PYGdefault{o}{);}

		\PYGdefault{k+kd}{final} \PYGdefault{n}{T} \PYGdefault{n}{model} \PYGdefault{o}{=} \PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{model}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{models} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ArrayList}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}();}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Method}\PYGdefault{o}{[]} \PYGdefault{n}{methods} \PYGdefault{o}{=} \PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{getClass}\PYGdefault{o}{()}
										\PYGdefault{o}{.}\PYGdefault{n+na}{getDeclaredMethods}\PYGdefault{o}{();}

		\PYGdefault{c+c1}{// form field annotations}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{n}{Method} \PYGdefault{n}{method} \PYGdefault{o}{:} \PYGdefault{n}{methods}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{FormField} \PYGdefault{n}{field} \PYGdefault{o}{=} \PYGdefault{n}{method}\PYGdefault{o}{.}\PYGdefault{n+na}{getAnnotation}\PYGdefault{o}{(}\PYGdefault{n}{FormField}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{);}
			\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{fieldModel}\PYGdefault{o}{;}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{String} \PYGdefault{n}{methodName} \PYGdefault{o}{=} \PYGdefault{n}{method}\PYGdefault{o}{.}\PYGdefault{n+na}{getName}\PYGdefault{o}{();}
			\PYGdefault{c+c1}{// ensure valid java bean getter}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{field} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{methodName}\PYGdefault{o}{.}\PYGdefault{n+na}{startsWith}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}get\PYGdefaultZdq{}}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}FormField annotated method must be a valid getter method \PYGdefaultZsq{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{methodName}
							\PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsq{}\PYGdefaultZdq{}}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{n}{fieldModel} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{id}\PYGdefault{o}{,} \PYGdefault{n}{methodName}\PYGdefault{o}{,} \PYGdefault{n}{field}\PYGdefault{o}{);}
				\PYGdefault{n}{models}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{);}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{c+c1}{// additional annotations}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{n}{Method} \PYGdefault{n}{method} \PYGdefault{o}{:} \PYGdefault{n}{methods}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}

			\PYGdefault{k+kd}{final} \PYGdefault{n}{SelectFormField} \PYGdefault{n}{select} \PYGdefault{o}{=} \PYGdefault{n}{method}\PYGdefault{o}{.}\PYGdefault{n+na}{getAnnotation}\PYGdefault{o}{(}\PYGdefault{n}{SelectFormField}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{);}
			\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{fieldModel}\PYGdefault{o}{;}

			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{select} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k+kt}{int} \PYGdefault{n}{index} \PYGdefault{o}{=} \PYGdefault{o}{\PYGdefaultZhy{}}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{String} \PYGdefault{n}{target} \PYGdefault{o}{=} \PYGdefault{n}{select}\PYGdefault{o}{.}\PYGdefault{n+na}{target}\PYGdefault{o}{();}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{String} \PYGdefault{n}{targetGetter} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{StringBuilder}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}get\PYGdefaultZdq{}}\PYGdefault{o}{).}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{n}{target}\PYGdefault{o}{.}\PYGdefault{n+na}{substring}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{)}
																					\PYGdefault{o}{.}\PYGdefault{n+na}{toUpperCase}\PYGdefault{o}{())}
																	\PYGdefault{o}{.}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{n}{target}\PYGdefault{o}{.}\PYGdefault{n+na}{substring}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{,} \PYGdefault{n}{target}\PYGdefault{o}{.}\PYGdefault{n+na}{length}\PYGdefault{o}{()))}
																	\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{();}
				\PYGdefault{k}{if} \PYGdefault{o}{((}\PYGdefault{n}{index} \PYGdefault{o}{=} \PYGdefault{n}{models}\PYGdefault{o}{.}\PYGdefault{n+na}{indexOf}\PYGdefault{o}{(}\PYGdefault{k}{new} \PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{(}\PYGdefault{n}{ctx}\PYGdefault{o}{.}\PYGdefault{n+na}{id}\PYGdefault{o}{,} \PYGdefault{n}{targetGetter}\PYGdefault{o}{)))} \PYGdefault{o}{==} \PYGdefault{o}{\PYGdefaultZhy{}}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}SelectFormField target \PYGdefaultZsq{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{targetGetter} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsq{} field model \PYGdefaultZsq{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{model}\PYGdefault{o}{.}\PYGdefault{n+na}{getClass}\PYGdefault{o}{()}
																															\PYGdefault{o}{.}\PYGdefault{n+na}{getName}\PYGdefault{o}{()} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsq{} not found\PYGdefaultZdq{}}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{n}{fieldModel} \PYGdefault{o}{=} \PYGdefault{n}{models}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{index}\PYGdefault{o}{);}
				\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k+kd}{final} \PYGdefault{n}{ObservableList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{dataList} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{ObservableList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Object}\PYGdefault{o}{\PYGdefaultZgt{})} \PYGdefault{n}{method}\PYGdefault{o}{.}\PYGdefault{n+na}{invoke}\PYGdefault{o}{(}\PYGdefault{n}{model}\PYGdefault{o}{);}
					\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{putData}\PYGdefault{o}{(}\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{id}\PYGdefault{o}{,} \PYGdefault{n}{dataList}\PYGdefault{o}{);}
					\PYGdefault{n}{fieldModel}\PYGdefault{o}{.}\PYGdefault{n+na}{putData}\PYGdefault{o}{(}\PYGdefault{n}{select}\PYGdefault{o}{.}\PYGdefault{n+na}{annotationType}\PYGdefault{o}{(),} \PYGdefault{n}{select}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{Throwable} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalStateException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Cannot retrieve select data (? extends Iterable\PYGdefaultZlt{}?\PYGdefaultZgt{})\PYGdefaultZdq{}}\PYGdefault{o}{,} \PYGdefault{n}{e}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{c+c1}{// Sort models by annotation provided ordinal}
		\PYGdefault{n}{Collections}\PYGdefault{o}{.}\PYGdefault{n+na}{sort}\PYGdefault{o}{(}\PYGdefault{n}{models}\PYGdefault{o}{,} \PYGdefault{k}{new} \PYGdefault{n}{Comparator}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{FormFieldResolvedModel}\PYGdefault{o}{\PYGdefaultZgt{}()} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n+nd}{@Override}
			\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{compare}\PYGdefault{o}{(}\PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{o1}\PYGdefault{o}{,} \PYGdefault{n}{FormFieldResolvedModel} \PYGdefault{n}{o2}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{return} \PYGdefault{n}{Integer}\PYGdefault{o}{.}\PYGdefault{n+na}{valueOf}\PYGdefault{o}{(}\PYGdefault{n}{o1}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{ordinal}\PYGdefault{o}{())}
								\PYGdefault{o}{.}\PYGdefault{n+na}{compareTo}\PYGdefault{o}{(}\PYGdefault{n}{o2}\PYGdefault{o}{.}\PYGdefault{n+na}{field}\PYGdefault{o}{.}\PYGdefault{n+na}{ordinal}\PYGdefault{o}{());}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{});}
		\PYGdefault{k}{return} \PYGdefault{n}{models}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}
\PYGdefault{o}{\PYGdefaultZcb{}}
\end{Verbatim}
