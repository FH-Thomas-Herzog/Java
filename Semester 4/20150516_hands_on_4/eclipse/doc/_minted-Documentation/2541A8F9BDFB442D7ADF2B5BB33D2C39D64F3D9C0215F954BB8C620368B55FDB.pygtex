\begin{Verbatim}[commandchars=\\\{\}]
\PYGdefault{k+kn}{package} \PYGdefault{n+nn}{at.fh.ooe.swe.test.puzzle.model.searchNode}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{static} \PYGdefault{n}{org}\PYGdefault{o}{.}\PYGdefault{n+na}{junit}\PYGdefault{o}{.}\PYGdefault{n+na}{Assert}\PYGdefault{o}{.}\PYGdefault{n+na}{assertEquals}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.ArrayList}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Iterator}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.List}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.NoSuchElementException}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{org.junit.Test}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{org.junit.runner.RunWith}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{org.junit.runners.JUnit4}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe.test.api.AbstractTest}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.api.Board}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.impl.BoardListImpl}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.model.SearchNode}\PYGdefault{o}{;}

\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{ * This test class tests the method \PYGdefaultZob{}@link SearchNode\PYGdefaultZsh{}iterator()\PYGdefaultZcb{} which returns}
\PYGdefault{c+cm}{ * an iterator instance.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ * So this test class test the iterator implementation which has been}
\PYGdefault{c+cm}{ * implemented as inner class.}
\PYGdefault{c+cm}{ * }
\PYGdefault{c+cm}{ * @author Thomas Herzog \PYGdefaultZlt{}thomas.herzog@students.fh\PYGdefaultZhy{}hagenberg.at\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ * @date Apr 28, 2015}
\PYGdefault{c+cm}{ */}
\PYGdefault{n+nd}{@RunWith}\PYGdefault{o}{(}\PYGdefault{n}{JUnit4}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{)}
\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{class} \PYGdefault{n+nc}{IteratorTest} \PYGdefault{k+kd}{extends} \PYGdefault{n}{AbstractTest} \PYGdefault{o}{\PYGdefaultZob{}}

	\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Then \PYGdefaultZhy{}\PYGdefaultZhy{}}
	\PYGdefault{n+nd}{@Test}\PYGdefault{o}{(}\PYGdefault{n}{expected} \PYGdefault{o}{=} \PYGdefault{n}{NoSuchElementException}\PYGdefault{o}{.}\PYGdefault{n+na}{class}\PYGdefault{o}{)}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{overflow}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Given \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{size} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{10}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{container} \PYGdefault{o}{=} \PYGdefault{n}{createContainer}\PYGdefault{o}{((}\PYGdefault{k+kt}{int}\PYGdefault{o}{)} \PYGdefault{n}{Math}\PYGdefault{o}{.}\PYGdefault{n+na}{pow}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{));}
		\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{set}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Board}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{board} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{n}{container}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} When \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Iterator}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}\PYGdefaultZgt{}} \PYGdefault{n}{it} \PYGdefault{o}{=} \PYGdefault{n}{node}\PYGdefault{o}{.}\PYGdefault{n+na}{iterator}\PYGdefault{o}{();}
		\PYGdefault{k}{while} \PYGdefault{o}{(}\PYGdefault{k+kc}{true}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n}{it}\PYGdefault{o}{.}\PYGdefault{n+na}{next}\PYGdefault{o}{();}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Test}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{noPredecessors}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Given \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{size} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{10}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{container} \PYGdefault{o}{=} \PYGdefault{n}{createContainer}\PYGdefault{o}{((}\PYGdefault{k+kt}{int}\PYGdefault{o}{)} \PYGdefault{n}{Math}\PYGdefault{o}{.}\PYGdefault{n+na}{pow}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{));}
		\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{set}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Board}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{board} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{n}{container}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}

		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} When \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Iterator}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}\PYGdefaultZgt{}} \PYGdefault{n}{it} \PYGdefault{o}{=} \PYGdefault{n}{node}\PYGdefault{o}{.}\PYGdefault{n+na}{iterator}\PYGdefault{o}{();}
		\PYGdefault{k+kt}{int} \PYGdefault{n}{count} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;}
		\PYGdefault{k}{while} \PYGdefault{o}{(}\PYGdefault{n}{it}\PYGdefault{o}{.}\PYGdefault{n+na}{hasNext}\PYGdefault{o}{())} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n}{it}\PYGdefault{o}{.}\PYGdefault{n+na}{next}\PYGdefault{o}{();}
			\PYGdefault{n}{count}\PYGdefault{o}{++;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Then \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{n}{assertEquals}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{,} \PYGdefault{n}{count}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Test}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{valid}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Given \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{size} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{10}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{container} \PYGdefault{o}{=} \PYGdefault{n}{createContainer}\PYGdefault{o}{((}\PYGdefault{k+kt}{int}\PYGdefault{o}{)} \PYGdefault{n}{Math}\PYGdefault{o}{.}\PYGdefault{n+na}{pow}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{));}
		\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{set}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Board}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{board} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{n}{container}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{node} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}\PYGdefaultZgt{}} \PYGdefault{n}{nodes} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ArrayList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}\PYGdefaultZgt{}();}
		\PYGdefault{n}{nodes}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{node}\PYGdefault{o}{);}
		\PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{tmp} \PYGdefault{o}{=} \PYGdefault{n}{node}\PYGdefault{o}{;}
		\PYGdefault{k+kt}{int} \PYGdefault{n}{expectedCount} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{i} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;} \PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZlt{}} \PYGdefault{l+m+mi}{10}\PYGdefault{o}{;} \PYGdefault{n}{i}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{predecessor} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}\PYGdefaultZgt{}(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{n}{board}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
			\PYGdefault{n}{tmp}\PYGdefault{o}{.}\PYGdefault{n+na}{setPredecessor}\PYGdefault{o}{(}\PYGdefault{n}{predecessor}\PYGdefault{o}{);}
			\PYGdefault{n}{tmp} \PYGdefault{o}{=} \PYGdefault{n}{predecessor}\PYGdefault{o}{;}
			\PYGdefault{n}{nodes}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{n}{predecessor}\PYGdefault{o}{);}
			\PYGdefault{n}{expectedCount}\PYGdefault{o}{++;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} When \PYGdefaultZhy{}}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Iterator}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}\PYGdefaultZgt{}} \PYGdefault{n}{it} \PYGdefault{o}{=} \PYGdefault{n}{node}\PYGdefault{o}{.}\PYGdefault{n+na}{iterator}\PYGdefault{o}{();}
		\PYGdefault{k+kt}{int} \PYGdefault{n}{count} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;}
		\PYGdefault{k}{while} \PYGdefault{o}{(}\PYGdefault{n}{it}\PYGdefault{o}{.}\PYGdefault{n+na}{hasNext}\PYGdefault{o}{())} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{SearchNode}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Integer}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{itNode} \PYGdefault{o}{=} \PYGdefault{n}{it}\PYGdefault{o}{.}\PYGdefault{n+na}{next}\PYGdefault{o}{();}

			\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Then \PYGdefaultZhy{}\PYGdefaultZhy{}}
			\PYGdefault{n}{assertEquals}\PYGdefault{o}{(}\PYGdefault{n}{itNode}\PYGdefault{o}{,} \PYGdefault{n}{nodes}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{count}\PYGdefault{o}{));}
			\PYGdefault{n}{count}\PYGdefault{o}{++;}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{c+c1}{// \PYGdefaultZhy{}\PYGdefaultZhy{} Then \PYGdefaultZhy{}\PYGdefaultZhy{}}
		\PYGdefault{n}{assertEquals}\PYGdefault{o}{(}\PYGdefault{n}{expectedCount}\PYGdefault{o}{,} \PYGdefault{n}{count}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}
\PYGdefault{o}{\PYGdefaultZcb{}}
\end{Verbatim}
