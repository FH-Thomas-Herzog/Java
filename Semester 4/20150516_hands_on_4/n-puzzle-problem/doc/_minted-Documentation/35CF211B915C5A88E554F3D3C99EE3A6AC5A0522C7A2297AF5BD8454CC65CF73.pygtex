\begin{Verbatim}[commandchars=\\\{\}]
\PYGdefault{k+kn}{package} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.impl}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.ArrayList}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Arrays}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Collections}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.Comparator}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.List}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.NoSuchElementException}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.function.Consumer}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.function.Function}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.stream.Collectors}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{java.util.stream.IntStream}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{org.apache.commons.lang.StringUtils}\PYGdefault{o}{;}

\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.api.Board}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.exception.InvalidBoardIndexException}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.exception.InvalidMoveException}\PYGdefault{o}{;}
\PYGdefault{k+kn}{import} \PYGdefault{n+nn}{at.fh.ooe.swe4.puzzle.model.Position}\PYGdefault{o}{;}

\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{ * This is the implementation of the \PYGdefaultZob{}@link Board\PYGdefaultZcb{} interface.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ * This class provides possibility to define the tile value type which needs to}
\PYGdefault{c+cm}{ * implement \PYGdefaultZob{}@link Comparable\PYGdefaultZcb{} interface.}
\PYGdefault{c+cm}{ * }
\PYGdefault{c+cm}{ * @author Thomas Herzog \PYGdefaultZlt{}thomas.herzog@students.fh\PYGdefaultZhy{}hagenberg.at\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ * @date May 2, 2015}
\PYGdefault{c+cm}{ * @param \PYGdefaultZlt{}T\PYGdefaultZgt{}}
\PYGdefault{c+cm}{ *            the value type of the tile values}
\PYGdefault{c+cm}{ */}
\PYGdefault{k+kd}{public} \PYGdefault{k+kd}{class} \PYGdefault{n+nc}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T} \PYGdefault{k+kd}{extends} \PYGdefault{n}{Comparable}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}\PYGdefaultZgt{}} \PYGdefault{k+kd}{implements} \PYGdefault{n}{Board}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{o}{\PYGdefaultZob{}}

	\PYGdefault{k+kd}{private} \PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{size}\PYGdefault{o}{;}
	\PYGdefault{k+kd}{private} \PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{container}\PYGdefault{o}{;}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * The default constructor for this class which needs an size to be given.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param size}
\PYGdefault{c+cm}{	 *            the size of the board, for the rows and the columns}
\PYGdefault{c+cm}{	 * @throws IllegalArgumentException}
\PYGdefault{c+cm}{	 *             if size \PYGdefaultZlt{}=0}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n+nf}{BoardListImpl}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{size}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{super}\PYGdefault{o}{();}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{size} \PYGdefault{o}{\PYGdefaultZlt{}=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalArgumentException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Size must be greater than 0\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{size} \PYGdefault{o}{=} \PYGdefault{n}{size}\PYGdefault{o}{;}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{containerSize} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{k+kt}{int}\PYGdefault{o}{)} \PYGdefault{n}{Math}\PYGdefault{o}{.}\PYGdefault{n+na}{pow}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{);}
		\PYGdefault{n}{container} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ArrayList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}(}\PYGdefault{n}{containerSize}\PYGdefault{o}{);}
		\PYGdefault{c+c1}{// Init with null values}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{i} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;} \PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZlt{}} \PYGdefault{n}{containerSize}\PYGdefault{o}{;} \PYGdefault{n}{i}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{add}\PYGdefault{o}{(}\PYGdefault{k+kc}{null}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * This constructor provides the size and container which contains the board}
\PYGdefault{c+cm}{	 * values, where the container will be copied and cannot be modified from}
\PYGdefault{c+cm}{	 * the outside.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * The container must be a flat representation of the board.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * It\PYGdefaultZsq{}s size must be size*size which is the same as rows*columns.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * E.g.: A value positioned at (3,2) will have the container index}
\PYGdefault{c+cm}{	 * (3\PYGdefaultZhy{}1)*size + (2\PYGdefaultZhy{}1)}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param size}
\PYGdefault{c+cm}{	 *            the size of the board}
\PYGdefault{c+cm}{	 * @param container}
\PYGdefault{c+cm}{	 *            the container holding the board values}
\PYGdefault{c+cm}{	 * @throws IllegalArgumentException}
\PYGdefault{c+cm}{	 *             \PYGdefaultZlt{}ul\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             \PYGdefaultZlt{}li\PYGdefaultZgt{}size \PYGdefaultZlt{}= 0\PYGdefaultZlt{}/li\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             \PYGdefaultZlt{}li\PYGdefaultZgt{}container is null\PYGdefaultZlt{}/li\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             \PYGdefaultZlt{}li\PYGdefaultZgt{}container.size() != (size*size)\PYGdefaultZlt{}/li\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 *             \PYGdefaultZlt{}/ul\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{n+nf}{BoardListImpl}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{container}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{super}\PYGdefault{o}{();}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{size} \PYGdefault{o}{\PYGdefaultZlt{}=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalArgumentException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Size must be greater than 0\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{container} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalArgumentException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Container must not be null\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(((}\PYGdefault{k+kt}{int}\PYGdefault{o}{)} \PYGdefault{n}{Math}\PYGdefault{o}{.}\PYGdefault{n+na}{pow}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{))} \PYGdefault{o}{!=} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{())} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalArgumentException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Container size does not correspond to given board size\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{size} \PYGdefault{o}{=} \PYGdefault{n}{size}\PYGdefault{o}{;}
		\PYGdefault{k}{this}\PYGdefault{o}{.}\PYGdefault{n+na}{container} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ArrayList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}(}\PYGdefault{n}{container}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{T} \PYGdefault{n+nf}{getTile}\PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{return} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{calculateContainerIdx}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{));}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{setTile}\PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx}\PYGdefault{o}{,} \PYGdefault{n}{T} \PYGdefault{n}{value}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{set}\PYGdefault{o}{(}\PYGdefault{n}{calculateContainerIdx}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{),} \PYGdefault{n}{value}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{setEmptyTile}\PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{setTile}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{,} \PYGdefault{o}{(}\PYGdefault{n}{T}\PYGdefault{o}{)} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{Position} \PYGdefault{n+nf}{getEmptyTilePosition}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int}\PYGdefault{o}{[]} \PYGdefault{n}{indices} \PYGdefault{o}{=} \PYGdefault{n}{IntStream}\PYGdefault{o}{.}\PYGdefault{n+na}{range}\PYGdefault{o}{(}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{,} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{())}
										\PYGdefault{o}{.}\PYGdefault{n+na}{filter}\PYGdefault{o}{(}\PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZhy{}\PYGdefaultZgt{}} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{i}\PYGdefault{o}{)} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)}
										\PYGdefault{o}{.}\PYGdefault{n+na}{toArray}\PYGdefault{o}{();}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{indices}\PYGdefault{o}{.}\PYGdefault{n+na}{length} \PYGdefault{o}{!=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx} \PYGdefault{o}{=} \PYGdefault{o}{((}\PYGdefault{n}{indices}\PYGdefault{o}{[}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{]} \PYGdefault{o}{/} \PYGdefault{n}{size}\PYGdefault{o}{)} \PYGdefault{o}{+} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{);}
			\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{indices}\PYGdefault{o}{[}\PYGdefault{l+m+mi}{0}\PYGdefault{o}{]} \PYGdefault{o}{\PYGdefaultZhy{}} \PYGdefault{o}{((}\PYGdefault{n}{rowIdx} \PYGdefault{o}{\PYGdefaultZhy{}} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{)} \PYGdefault{o}{*} \PYGdefault{n}{size}\PYGdefault{o}{)} \PYGdefault{o}{+} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{);}
			\PYGdefault{k}{return} \PYGdefault{k}{new} \PYGdefault{n}{Position}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{k}{new} \PYGdefault{n}{Position}\PYGdefault{o}{(\PYGdefaultZhy{}}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{,} \PYGdefault{o}{\PYGdefaultZhy{}}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{Position} \PYGdefault{n+nf}{getTilePosition}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{n}{T} \PYGdefault{n}{value}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{c+c1}{// row iteration}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{i} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;} \PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZlt{}=} \PYGdefault{n}{size}\PYGdefault{o}{();} \PYGdefault{n}{i}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{c+c1}{// column iteration}
			\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{j} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;} \PYGdefault{n}{j} \PYGdefault{o}{\PYGdefaultZlt{}=} \PYGdefault{n}{size}\PYGdefault{o}{();} \PYGdefault{n}{j}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k+kd}{final} \PYGdefault{n}{T} \PYGdefault{n}{tile} \PYGdefault{o}{=} \PYGdefault{n}{getTile}\PYGdefault{o}{(}\PYGdefault{n}{i}\PYGdefault{o}{,} \PYGdefault{n}{j}\PYGdefault{o}{);}
				\PYGdefault{k}{if} \PYGdefault{o}{(((}\PYGdefault{n}{tile} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZam{}\PYGdefaultZam{}} \PYGdefault{o}{(}\PYGdefault{n}{value} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{))} \PYGdefault{o}{||} \PYGdefault{o}{((}\PYGdefault{n}{tile} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZam{}\PYGdefaultZam{}} \PYGdefault{o}{(}\PYGdefault{n}{tile}\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{value}\PYGdefault{o}{))))} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k}{return} \PYGdefault{k}{new} \PYGdefault{n}{Position}\PYGdefault{o}{(}\PYGdefault{n}{i}\PYGdefault{o}{,} \PYGdefault{n}{j}\PYGdefault{o}{);}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{NoSuchElementException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Tile with value \PYGdefaultZsq{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{o}{((}\PYGdefault{n}{value} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{?} \PYGdefault{l+s}{\PYGdefaultZdq{}null\PYGdefaultZdq{}} \PYGdefault{o}{:} \PYGdefault{n}{value}\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{())} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsq{} does not exist on the board\PYGdefaultZdq{}}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{size}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{return} \PYGdefault{n}{size}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{boolean} \PYGdefault{n+nf}{isValid}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{return} \PYGdefault{o}{(}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{stream}\PYGdefault{o}{()}
							\PYGdefault{o}{.}\PYGdefault{n+na}{distinct}\PYGdefault{o}{()}
							\PYGdefault{o}{.}\PYGdefault{n+na}{count}\PYGdefault{o}{()} \PYGdefault{o}{==} \PYGdefault{o}{(}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{()))} \PYGdefault{o}{\PYGdefaultZam{}\PYGdefaultZam{}} \PYGdefault{o}{(}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{stream}\PYGdefault{o}{()}
																			\PYGdefault{o}{.}\PYGdefault{n+na}{filter}\PYGdefault{o}{(}\PYGdefault{n}{element} \PYGdefault{o}{\PYGdefaultZhy{}\PYGdefaultZgt{}} \PYGdefault{n}{element} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)}
																			\PYGdefault{o}{.}\PYGdefault{n+na}{count}\PYGdefault{o}{()} \PYGdefault{o}{==} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{shuffle}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{c+c1}{// We need to ensure the parity of the shuffled board}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{boolean} \PYGdefault{n}{even} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{calculateParity}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZpc{}} \PYGdefault{l+m+mi}{2} \PYGdefault{o}{==} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{);}
		\PYGdefault{k+kt}{boolean} \PYGdefault{n}{shuffledEven} \PYGdefault{o}{=} \PYGdefault{o}{!}\PYGdefault{n}{even}\PYGdefault{o}{;}

		\PYGdefault{c+c1}{// fill list with the possible moves}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Move}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{moves} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ArrayList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Move}\PYGdefault{o}{\PYGdefaultZgt{}(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{values}\PYGdefault{o}{().}\PYGdefault{n+na}{length} \PYGdefault{o}{*} \PYGdefault{l+m+mi}{4}\PYGdefault{o}{);}
		\PYGdefault{n}{moves}\PYGdefault{o}{.}\PYGdefault{n+na}{addAll}\PYGdefault{o}{(}\PYGdefault{n}{Arrays}\PYGdefault{o}{.}\PYGdefault{n+na}{asList}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{values}\PYGdefault{o}{()));}
		\PYGdefault{n}{moves}\PYGdefault{o}{.}\PYGdefault{n+na}{addAll}\PYGdefault{o}{(}\PYGdefault{n}{Arrays}\PYGdefault{o}{.}\PYGdefault{n+na}{asList}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{values}\PYGdefault{o}{()));}
		\PYGdefault{n}{moves}\PYGdefault{o}{.}\PYGdefault{n+na}{addAll}\PYGdefault{o}{(}\PYGdefault{n}{Arrays}\PYGdefault{o}{.}\PYGdefault{n+na}{asList}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{values}\PYGdefault{o}{()));}
		\PYGdefault{n}{moves}\PYGdefault{o}{.}\PYGdefault{n+na}{addAll}\PYGdefault{o}{(}\PYGdefault{n}{Arrays}\PYGdefault{o}{.}\PYGdefault{n+na}{asList}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{values}\PYGdefault{o}{()));}

		\PYGdefault{c+c1}{// as long as parity is not equal to original one}
		\PYGdefault{k}{while} \PYGdefault{o}{(}\PYGdefault{n}{even} \PYGdefault{o}{!=} \PYGdefault{n}{shuffledEven}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{c+c1}{// shuffle the possible moves}
			\PYGdefault{n}{Collections}\PYGdefault{o}{.}\PYGdefault{n+na}{shuffle}\PYGdefault{o}{(}\PYGdefault{n}{moves}\PYGdefault{o}{);}
			\PYGdefault{n}{moves}\PYGdefault{o}{.}\PYGdefault{n+na}{forEach}\PYGdefault{o}{(}\PYGdefault{k}{new} \PYGdefault{n}{Consumer}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Move}\PYGdefault{o}{\PYGdefaultZgt{}()} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{n+nd}{@Override}
				\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{accept}\PYGdefault{o}{(}\PYGdefault{n}{Move} \PYGdefault{n}{direction}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
						\PYGdefault{c+c1}{// try to perform move}
						\PYGdefault{n}{move}\PYGdefault{o}{(}\PYGdefault{n}{direction}\PYGdefault{o}{);}
					\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{InvalidMoveException} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
						\PYGdefault{c+c1}{// expected because random movements could try to move}
						\PYGdefault{c+c1}{// empty tile out of the board}
					\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{});}
			\PYGdefault{c+c1}{// recalculate the parity of the shuffled board}
			\PYGdefault{n}{shuffledEven} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{calculateParity}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZpc{}} \PYGdefault{l+m+mi}{2} \PYGdefault{o}{==} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{move}\PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Position} \PYGdefault{n}{position} \PYGdefault{o}{=} \PYGdefault{n}{getEmptyTilePosition}\PYGdefault{o}{();}
		\PYGdefault{n}{setTile}\PYGdefault{o}{(}\PYGdefault{n}{position}\PYGdefault{o}{.}\PYGdefault{n+na}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{position}\PYGdefault{o}{.}\PYGdefault{n+na}{colIdx}\PYGdefault{o}{,} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{calculateContainerIdx}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{)));}
		\PYGdefault{n}{setTile}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{,} \PYGdefault{k+kc}{null}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{moveLeft}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{move}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{LEFT}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{moveRight}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{move}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{RIGHT}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{moveUp}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{move}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{UP}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{moveDown}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{move}\PYGdefault{o}{(}\PYGdefault{n}{Move}\PYGdefault{o}{.}\PYGdefault{n+na}{DOWN}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{makeMoves}\PYGdefault{o}{(}\PYGdefault{n}{Iterable}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Move}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{moves}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{moves} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{InvalidMoveException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Cannot perform moves because iterable instance is null\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{n}{moves}\PYGdefault{o}{.}\PYGdefault{n+na}{iterator}\PYGdefault{o}{()}
				\PYGdefault{o}{.}\PYGdefault{n+na}{forEachRemaining}\PYGdefault{o}{(}\PYGdefault{k}{new} \PYGdefault{n}{Consumer}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{Move}\PYGdefault{o}{\PYGdefaultZgt{}()} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{n+nd}{@Override}
					\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{accept}\PYGdefault{o}{(}\PYGdefault{n}{Move} \PYGdefault{n}{t}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
						\PYGdefault{n}{move}\PYGdefault{o}{(}\PYGdefault{n}{t}\PYGdefault{o}{);}
					\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{o}{\PYGdefaultZcb{});}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+c1}{// Private helper}
	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Check if the given indices are valid for this board.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param rowIdx}
\PYGdefault{c+cm}{	 *            the row index}
\PYGdefault{c+cm}{	 * @param colIdx}
\PYGdefault{c+cm}{	 *            the column index}
\PYGdefault{c+cm}{	 * @throws InvalidBoardIndexException}
\PYGdefault{c+cm}{	 *             if at least one of the indices is invalid}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{private} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{checkForValidIndex}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{if} \PYGdefault{o}{((}\PYGdefault{n}{rowIdx} \PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{size}\PYGdefault{o}{)} \PYGdefault{o}{||} \PYGdefault{o}{(}\PYGdefault{n}{rowIdx} \PYGdefault{o}{\PYGdefaultZlt{}=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{)} \PYGdefault{o}{||} \PYGdefault{o}{(}\PYGdefault{n}{colIdx} \PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{size}\PYGdefault{o}{)} \PYGdefault{o}{||} \PYGdefault{o}{(}\PYGdefault{n}{colIdx} \PYGdefault{o}{\PYGdefaultZlt{}=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{InvalidBoardIndexException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}One of the indicies over or underlfows the border defined by size. rowIdx: \PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{rowIdx} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{} | colIdx: \PYGdefaultZdq{}}
					\PYGdefault{o}{+} \PYGdefault{n}{colIdx}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Calculates the index for the backed container.}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param rowIdx}
\PYGdefault{c+cm}{	 *            the row index}
\PYGdefault{c+cm}{	 * @param colIdx}
\PYGdefault{c+cm}{	 *            the column index}
\PYGdefault{c+cm}{	 * @return the calculated index}
\PYGdefault{c+cm}{	 * @throws InvalidBoardIndexException}
\PYGdefault{c+cm}{	 *             if at least one of the indexes is invalid}
\PYGdefault{c+cm}{	 * @see BoardListImpl\PYGdefaultZsh{}checkForValidIndex(int, int)}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{private} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{calculateContainerIdx}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{colIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{n}{checkForValidIndex}\PYGdefault{o}{(}\PYGdefault{n}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{colIdx}\PYGdefault{o}{);}
		\PYGdefault{k}{return} \PYGdefault{o}{((}\PYGdefault{n}{rowIdx} \PYGdefault{o}{\PYGdefaultZhy{}} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{)} \PYGdefault{o}{*} \PYGdefault{n}{size}\PYGdefault{o}{)} \PYGdefault{o}{+} \PYGdefault{o}{(}\PYGdefault{n}{colIdx} \PYGdefault{o}{\PYGdefaultZhy{}} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Performs a move operation into the intended direction.\PYGdefaultZlt{}br\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * The move operation can be performed when the following conditions fit.}
\PYGdefault{c+cm}{	 * \PYGdefaultZlt{}ul\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * \PYGdefaultZlt{}li\PYGdefaultZgt{}the board is valid\PYGdefaultZlt{}/li\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * \PYGdefaultZlt{}li\PYGdefaultZgt{}the new position is valid\PYGdefaultZlt{}/li\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * \PYGdefaultZlt{}li\PYGdefaultZgt{}the given \PYGdefaultZob{}@link Move\PYGdefaultZcb{} enumeration is supported\PYGdefaultZlt{}/li\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * \PYGdefaultZlt{}/ul\PYGdefaultZgt{}}
\PYGdefault{c+cm}{	 * }
\PYGdefault{c+cm}{	 * @param direction}
\PYGdefault{c+cm}{	 *            the direction to move to}
\PYGdefault{c+cm}{	 * @throws InvalidMoveException}
\PYGdefault{c+cm}{	 *             if the element cannot be moved to the intended direction}
\PYGdefault{c+cm}{	 * @see BoardListImpl\PYGdefaultZsh{}calculateContainerIdx(int, int)}
\PYGdefault{c+cm}{	 * @see BoardListImpl\PYGdefaultZsh{}getEmptyTilePosition()}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{private} \PYGdefault{k+kt}{void} \PYGdefault{n+nf}{move}\PYGdefault{o}{(}\PYGdefault{k+kd}{final} \PYGdefault{n}{Move} \PYGdefault{n}{direction}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{direction} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{InvalidMoveException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Cannot perform move operation with null direction\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k+kt}{int} \PYGdefault{n}{rowIdxDif} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;}
		\PYGdefault{k+kt}{int} \PYGdefault{n}{colIdxDif} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;}
		\PYGdefault{k}{switch} \PYGdefault{o}{(}\PYGdefault{n}{direction}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{case} \PYGdefault{n}{UP}\PYGdefault{o}{:}
			\PYGdefault{n}{rowIdxDif} \PYGdefault{o}{=} \PYGdefault{o}{\PYGdefaultZhy{}}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
			\PYGdefault{k}{break}\PYGdefault{o}{;}
		\PYGdefault{k}{case} \PYGdefault{n}{DOWN}\PYGdefault{o}{:}
			\PYGdefault{n}{rowIdxDif} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
			\PYGdefault{k}{break}\PYGdefault{o}{;}
		\PYGdefault{k}{case} \PYGdefault{n}{LEFT}\PYGdefault{o}{:}
			\PYGdefault{n}{colIdxDif} \PYGdefault{o}{=} \PYGdefault{o}{\PYGdefaultZhy{}}\PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
			\PYGdefault{k}{break}\PYGdefault{o}{;}
		\PYGdefault{k}{case} \PYGdefault{n}{RIGHT}\PYGdefault{o}{:}
			\PYGdefault{n}{colIdxDif} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
			\PYGdefault{k}{break}\PYGdefault{o}{;}
		\PYGdefault{k}{default}\PYGdefault{o}{:}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{IllegalArgumentException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Direction enum \PYGdefaultZsq{}\PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{direction}\PYGdefault{o}{.}\PYGdefault{n+na}{name}\PYGdefault{o}{()} \PYGdefault{o}{+} \PYGdefault{l+s}{\PYGdefaultZdq{}\PYGdefaultZsq{} is not handled\PYGdefaultZdq{}}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}

		\PYGdefault{k}{try} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{Position} \PYGdefault{n}{oldPosition} \PYGdefault{o}{=} \PYGdefault{n}{getEmptyTilePosition}\PYGdefault{o}{();}
			\PYGdefault{n}{checkForValidIndex}\PYGdefault{o}{(}\PYGdefault{n}{oldPosition}\PYGdefault{o}{.}\PYGdefault{n+na}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{oldPosition}\PYGdefault{o}{.}\PYGdefault{n+na}{colIdx}\PYGdefault{o}{);}
			\PYGdefault{n}{move}\PYGdefault{o}{((}\PYGdefault{n}{oldPosition}\PYGdefault{o}{.}\PYGdefault{n+na}{rowIdx} \PYGdefault{o}{+} \PYGdefault{n}{rowIdxDif}\PYGdefault{o}{),} \PYGdefault{o}{(}\PYGdefault{n}{oldPosition}\PYGdefault{o}{.}\PYGdefault{n+na}{colIdx} \PYGdefault{o}{+} \PYGdefault{n}{colIdxDif}\PYGdefault{o}{));}
		\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{catch} \PYGdefault{o}{(}\PYGdefault{n}{InvalidBoardIndexException} \PYGdefault{n}{e}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{throw} \PYGdefault{k}{new} \PYGdefault{n}{InvalidMoveException}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}Cannot move to the intended direction. direction: \PYGdefaultZdq{}} \PYGdefault{o}{+} \PYGdefault{n}{direction}\PYGdefault{o}{.}\PYGdefault{n+na}{name}\PYGdefault{o}{(),} \PYGdefault{n}{e}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{c+cm}{/**}
\PYGdefault{c+cm}{	 * Compares this instance to another by comparing the size of the board.}
\PYGdefault{c+cm}{	 */}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{compareTo}\PYGdefault{o}{(}\PYGdefault{n}{Board}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{o}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{return} \PYGdefault{n}{Integer}\PYGdefault{o}{.}\PYGdefault{n+na}{valueOf}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{)}
						\PYGdefault{o}{.}\PYGdefault{n+na}{compareTo}\PYGdefault{o}{(}\PYGdefault{n}{o}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{());}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{calculateParity}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{Position} \PYGdefault{n}{position} \PYGdefault{o}{=} \PYGdefault{n}{getEmptyTilePosition}\PYGdefault{o}{();}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{emptyTileIdx} \PYGdefault{o}{=} \PYGdefault{n}{calculateContainerIdx}\PYGdefault{o}{(}\PYGdefault{n}{position}\PYGdefault{o}{.}\PYGdefault{n+na}{rowIdx}\PYGdefault{o}{,} \PYGdefault{n}{position}\PYGdefault{o}{.}\PYGdefault{n+na}{colIdx}\PYGdefault{o}{);}
		\PYGdefault{k+kt}{int} \PYGdefault{n}{parity} \PYGdefault{o}{=} \PYGdefault{n}{position}\PYGdefault{o}{.}\PYGdefault{n+na}{rowIdx}\PYGdefault{o}{;}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{i} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;} \PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZlt{}} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{();} \PYGdefault{n}{i}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{c+c1}{// ignore empty tile}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{i} \PYGdefault{o}{!=} \PYGdefault{n}{emptyTileIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
				\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{j} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;} \PYGdefault{n}{j} \PYGdefault{o}{\PYGdefaultZlt{}} \PYGdefault{n}{i}\PYGdefault{o}{;} \PYGdefault{n}{j}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
					\PYGdefault{c+c1}{// ignore empty tile}
					\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{j} \PYGdefault{o}{!=} \PYGdefault{n}{emptyTileIdx}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
						\PYGdefault{n}{parity} \PYGdefault{o}{+=} \PYGdefault{o}{(}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{j}\PYGdefault{o}{)}
											\PYGdefault{o}{.}\PYGdefault{n+na}{compareTo}\PYGdefault{o}{(}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{(}\PYGdefault{n}{i}\PYGdefault{o}{))} \PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{)} \PYGdefault{o}{?} \PYGdefault{l+m+mi}{1} \PYGdefault{o}{:} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;}
					\PYGdefault{o}{\PYGdefaultZcb{}}
				\PYGdefault{o}{\PYGdefaultZcb{}}
			\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{n}{parity}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{Board}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n+nf}{clone}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{return} \PYGdefault{k}{new} \PYGdefault{n}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}(}\PYGdefault{n}{size}\PYGdefault{o}{,} \PYGdefault{n}{container}\PYGdefault{o}{);}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{int} \PYGdefault{n+nf}{hashCode}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{prime} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{31}\PYGdefault{o}{;}
		\PYGdefault{k+kt}{int} \PYGdefault{n}{result} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{;}
		\PYGdefault{n}{result} \PYGdefault{o}{=} \PYGdefault{n}{prime} \PYGdefault{o}{*} \PYGdefault{n}{result} \PYGdefault{o}{+} \PYGdefault{o}{((}\PYGdefault{n}{container} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{?} \PYGdefault{l+m+mi}{0} \PYGdefault{o}{:} \PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{hashCode}\PYGdefault{o}{());}
		\PYGdefault{k}{return} \PYGdefault{n}{result}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{k+kt}{boolean} \PYGdefault{n+nf}{equals}\PYGdefault{o}{(}\PYGdefault{n}{Object} \PYGdefault{n}{obj}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{k}{this} \PYGdefault{o}{==} \PYGdefault{n}{obj}\PYGdefault{o}{)}
			\PYGdefault{k}{return} \PYGdefault{k+kc}{true}\PYGdefault{o}{;}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{obj} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)}
			\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{getClass}\PYGdefault{o}{()} \PYGdefault{o}{!=} \PYGdefault{n}{obj}\PYGdefault{o}{.}\PYGdefault{n+na}{getClass}\PYGdefault{o}{())}
			\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
		\PYGdefault{n}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{other} \PYGdefault{o}{=} \PYGdefault{o}{(}\PYGdefault{n}{BoardListImpl}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{})} \PYGdefault{n}{obj}\PYGdefault{o}{;}
		\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{container} \PYGdefault{o}{==} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{other}\PYGdefault{o}{.}\PYGdefault{n+na}{container} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)}
				\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
		\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{else} \PYGdefault{k}{if} \PYGdefault{o}{(!}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{equals}\PYGdefault{o}{(}\PYGdefault{n}{other}\PYGdefault{o}{.}\PYGdefault{n+na}{container}\PYGdefault{o}{))}
			\PYGdefault{k}{return} \PYGdefault{k+kc}{false}\PYGdefault{o}{;}
		\PYGdefault{k}{return} \PYGdefault{k+kc}{true}\PYGdefault{o}{;}
	\PYGdefault{o}{\PYGdefaultZcb{}}

	\PYGdefault{n+nd}{@Override}
	\PYGdefault{k+kd}{public} \PYGdefault{n}{String} \PYGdefault{n+nf}{toString}\PYGdefault{o}{()} \PYGdefault{o}{\PYGdefaultZob{}}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{copy} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{ArrayList}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}(}\PYGdefault{n}{container}\PYGdefault{o}{);}
		\PYGdefault{k+kd}{final} \PYGdefault{k+kt}{int} \PYGdefault{n}{length} \PYGdefault{o}{=} \PYGdefault{n}{copy}\PYGdefault{o}{.}\PYGdefault{n+na}{stream}\PYGdefault{o}{()}
								\PYGdefault{o}{.}\PYGdefault{n+na}{max}\PYGdefault{o}{(}\PYGdefault{n}{Comparator}\PYGdefault{o}{.}\PYGdefault{n+na}{comparing}\PYGdefault{o}{(}\PYGdefault{n}{item} \PYGdefault{o}{\PYGdefaultZhy{}\PYGdefaultZgt{}} \PYGdefault{o}{((}\PYGdefault{n}{item} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{?} \PYGdefault{n}{item}\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{()}
																						\PYGdefault{o}{.}\PYGdefault{n+na}{length}\PYGdefault{o}{()} \PYGdefault{o}{:} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{)))}
								\PYGdefault{o}{.}\PYGdefault{n+na}{get}\PYGdefault{o}{()}
								\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{()}
								\PYGdefault{o}{.}\PYGdefault{n+na}{length}\PYGdefault{o}{();}
		\PYGdefault{k+kd}{final} \PYGdefault{n}{StringBuilder} \PYGdefault{n}{sb} \PYGdefault{o}{=} \PYGdefault{k}{new} \PYGdefault{n}{StringBuilder}\PYGdefault{o}{(}\PYGdefault{n}{container}\PYGdefault{o}{.}\PYGdefault{n+na}{size}\PYGdefault{o}{()} \PYGdefault{o}{*} \PYGdefault{n}{length} \PYGdefault{o}{*} \PYGdefault{l+m+mi}{2}\PYGdefault{o}{);}
		\PYGdefault{n}{sb}\PYGdefault{o}{.}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{n}{System}\PYGdefault{o}{.}\PYGdefault{n+na}{lineSeparator}\PYGdefault{o}{());}
		\PYGdefault{k}{for} \PYGdefault{o}{(}\PYGdefault{k+kt}{int} \PYGdefault{n}{i} \PYGdefault{o}{=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{;} \PYGdefault{n}{i} \PYGdefault{o}{\PYGdefaultZlt{}} \PYGdefault{n}{size}\PYGdefault{o}{();} \PYGdefault{n}{i}\PYGdefault{o}{++)} \PYGdefault{o}{\PYGdefaultZob{}}
			\PYGdefault{k+kd}{final} \PYGdefault{n}{List}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{n}{result} \PYGdefault{o}{=} \PYGdefault{n}{copy}\PYGdefault{o}{.}\PYGdefault{n+na}{stream}\PYGdefault{o}{()}
										\PYGdefault{o}{.}\PYGdefault{n+na}{limit}\PYGdefault{o}{(}\PYGdefault{n}{size}\PYGdefault{o}{())}
										\PYGdefault{o}{.}\PYGdefault{n+na}{collect}\PYGdefault{o}{(}\PYGdefault{n}{Collectors}\PYGdefault{o}{.}\PYGdefault{n+na}{toList}\PYGdefault{o}{());}
			\PYGdefault{n}{sb}\PYGdefault{o}{.}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{n}{result}\PYGdefault{o}{.}\PYGdefault{n+na}{stream}\PYGdefault{o}{()}
							\PYGdefault{o}{.}\PYGdefault{n+na}{map}\PYGdefault{o}{(}\PYGdefault{k}{new} \PYGdefault{n}{Function}\PYGdefault{o}{\PYGdefaultZlt{}}\PYGdefault{n}{T}\PYGdefault{o}{,} \PYGdefault{n}{String}\PYGdefault{o}{\PYGdefaultZgt{}()} \PYGdefault{o}{\PYGdefaultZob{}}
								\PYGdefault{k+kd}{public} \PYGdefault{n}{String} \PYGdefault{n+nf}{apply}\PYGdefault{o}{(}\PYGdefault{n}{T} \PYGdefault{n}{t}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
									\PYGdefault{k+kd}{final} \PYGdefault{n}{String} \PYGdefault{n}{value}\PYGdefault{o}{;}
									\PYGdefault{k+kt}{int} \PYGdefault{n}{l} \PYGdefault{o}{=} \PYGdefault{o}{((}\PYGdefault{n}{length} \PYGdefault{o}{\PYGdefaultZgt{}} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZam{}\PYGdefaultZam{}} \PYGdefault{o}{(}\PYGdefault{n}{length} \PYGdefault{o}{\PYGdefaultZpc{}} \PYGdefault{l+m+mi}{2} \PYGdefault{o}{!=} \PYGdefault{l+m+mi}{0}\PYGdefault{o}{))} \PYGdefault{o}{?} \PYGdefault{o}{(}\PYGdefault{n}{length} \PYGdefault{o}{+} \PYGdefault{l+m+mi}{1}\PYGdefault{o}{)} \PYGdefault{o}{:} \PYGdefault{n}{length}\PYGdefault{o}{;}
									\PYGdefault{k}{if} \PYGdefault{o}{(}\PYGdefault{n}{t} \PYGdefault{o}{!=} \PYGdefault{k+kc}{null}\PYGdefault{o}{)} \PYGdefault{o}{\PYGdefaultZob{}}
										\PYGdefault{n}{value} \PYGdefault{o}{=} \PYGdefault{n}{t}\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{();}
									\PYGdefault{o}{\PYGdefaultZcb{}} \PYGdefault{k}{else} \PYGdefault{o}{\PYGdefaultZob{}}
										\PYGdefault{n}{value} \PYGdefault{o}{=} \PYGdefault{l+s}{\PYGdefaultZdq{} \PYGdefaultZdq{}}\PYGdefault{o}{;}
									\PYGdefault{o}{\PYGdefaultZcb{}}
									\PYGdefault{k}{return} \PYGdefault{k}{new} \PYGdefault{n}{StringBuilder}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}[\PYGdefaultZdq{}}\PYGdefault{o}{).}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{n}{StringUtils}\PYGdefault{o}{.}\PYGdefault{n+na}{center}\PYGdefault{o}{(}\PYGdefault{n}{value}\PYGdefault{o}{,} \PYGdefault{n}{l}\PYGdefault{o}{))}
																	\PYGdefault{o}{.}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{}]\PYGdefaultZdq{}}\PYGdefault{o}{)}
																	\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{();}
								\PYGdefault{o}{\PYGdefaultZcb{};}
							\PYGdefault{o}{\PYGdefaultZcb{})}
							\PYGdefault{o}{.}\PYGdefault{n+na}{collect}\PYGdefault{o}{(}\PYGdefault{n}{Collectors}\PYGdefault{o}{.}\PYGdefault{n+na}{joining}\PYGdefault{o}{(}\PYGdefault{l+s}{\PYGdefaultZdq{} \PYGdefaultZdq{}}\PYGdefault{o}{)))}
				\PYGdefault{o}{.}\PYGdefault{n+na}{append}\PYGdefault{o}{(}\PYGdefault{n}{System}\PYGdefault{o}{.}\PYGdefault{n+na}{lineSeparator}\PYGdefault{o}{());}
			\PYGdefault{n}{copy}\PYGdefault{o}{.}\PYGdefault{n+na}{removeAll}\PYGdefault{o}{(}\PYGdefault{n}{result}\PYGdefault{o}{);}
		\PYGdefault{o}{\PYGdefaultZcb{}}
		\PYGdefault{k}{return} \PYGdefault{n}{sb}\PYGdefault{o}{.}\PYGdefault{n+na}{toString}\PYGdefault{o}{();}
	\PYGdefault{o}{\PYGdefaultZcb{}}
\PYGdefault{o}{\PYGdefaultZcb{}}
\end{Verbatim}
